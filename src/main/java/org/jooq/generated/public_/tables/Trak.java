/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.public_.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.Log.LogPath;
import org.jooq.generated.public_.tables.records.TrakRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Trak extends TableImpl<TrakRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TRAK</code>
     */
    public static final Trak TRAK = new Trak();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrakRecord> getRecordType() {
        return TrakRecord.class;
    }

    /**
     * The column <code>PUBLIC.TRAK.LINE</code>.
     */
    public final TableField<TrakRecord, Integer> LINE = createField(DSL.name("LINE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRAK.TIMESTAMP</code>.
     */
    public final TableField<TrakRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("TIMESTAMP"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRAK.THREAD</code>.
     */
    public final TableField<TrakRecord, String> THREAD = createField(DSL.name("THREAD"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRAK.TRACE_MAP</code>.
     */
    public final TableField<TrakRecord, String> TRACE_MAP = createField(DSL.name("TRACE_MAP"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRAK.TRACKED_OBJ</code>.
     */
    public final TableField<TrakRecord, String> TRACKED_OBJ = createField(DSL.name("TRACKED_OBJ"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRAK.TRACE_NUM</code>.
     */
    public final TableField<TrakRecord, Integer> TRACE_NUM = createField(DSL.name("TRACE_NUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRAK.TRACE_MAP_SIZE</code>.
     */
    public final TableField<TrakRecord, Integer> TRACE_MAP_SIZE = createField(DSL.name("TRACE_MAP_SIZE"), SQLDataType.INTEGER.nullable(false), this, "");

    private Trak(Name alias, Table<TrakRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Trak(Name alias, Table<TrakRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.TRAK</code> table reference
     */
    public Trak(String alias) {
        this(DSL.name(alias), TRAK);
    }

    /**
     * Create an aliased <code>PUBLIC.TRAK</code> table reference
     */
    public Trak(Name alias) {
        this(alias, TRAK);
    }

    /**
     * Create a <code>PUBLIC.TRAK</code> table reference
     */
    public Trak() {
        this(DSL.name("TRAK"), null);
    }

    public <O extends Record> Trak(Table<O> path, ForeignKey<O, TrakRecord> childPath, InverseForeignKey<O, TrakRecord> parentPath) {
        super(path, childPath, parentPath, TRAK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TrakPath extends Trak implements Path<TrakRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TrakPath(Table<O> path, ForeignKey<O, TrakRecord> childPath, InverseForeignKey<O, TrakRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TrakPath(Name alias, Table<TrakRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TrakPath as(String alias) {
            return new TrakPath(DSL.name(alias), this);
        }

        @Override
        public TrakPath as(Name alias) {
            return new TrakPath(alias, this);
        }

        @Override
        public TrakPath as(Table<?> alias) {
            return new TrakPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TrakRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_27;
    }

    @Override
    public List<ForeignKey<TrakRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRAK_FK_LINE);
    }

    private transient LogPath _log;

    /**
     * Get the implicit join path to the <code>PUBLIC.LOG</code> table.
     */
    public LogPath log() {
        if (_log == null)
            _log = new LogPath(this, Keys.TRAK_FK_LINE, null);

        return _log;
    }

    @Override
    public Trak as(String alias) {
        return new Trak(DSL.name(alias), this);
    }

    @Override
    public Trak as(Name alias) {
        return new Trak(alias, this);
    }

    @Override
    public Trak as(Table<?> alias) {
        return new Trak(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trak rename(String name) {
        return new Trak(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trak rename(Name name) {
        return new Trak(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trak rename(Table<?> name) {
        return new Trak(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trak where(Condition condition) {
        return new Trak(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trak where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trak where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trak where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trak where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trak where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trak where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trak where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trak whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trak whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
