/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.public_.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.Cont.ContPath;
import org.jooq.generated.public_.tables.Crumb.CrumbPath;
import org.jooq.generated.public_.tables.CrumbMisfits.CrumbMisfitsPath;
import org.jooq.generated.public_.tables.Ctx.CtxPath;
import org.jooq.generated.public_.tables.CtxMisfits.CtxMisfitsPath;
import org.jooq.generated.public_.tables.Mesg.MesgPath;
import org.jooq.generated.public_.tables.Trak.TrakPath;
import org.jooq.generated.public_.tables.TrakMisfits.TrakMisfitsPath;
import org.jooq.generated.public_.tables.records.LogRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Log extends TableImpl<LogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.LOG</code>
     */
    public static final Log LOG = new Log();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogRecord> getRecordType() {
        return LogRecord.class;
    }

    /**
     * The column <code>PUBLIC.LOG.LINE</code>.
     */
    public final TableField<LogRecord, Integer> LINE = createField(DSL.name("LINE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LOG.ENTRY</code>.
     */
    public final TableField<LogRecord, String> ENTRY = createField(DSL.name("ENTRY"), SQLDataType.VARCHAR(1000000000), this, "");

    private Log(Name alias, Table<LogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Log(Name alias, Table<LogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.LOG</code> table reference
     */
    public Log(String alias) {
        this(DSL.name(alias), LOG);
    }

    /**
     * Create an aliased <code>PUBLIC.LOG</code> table reference
     */
    public Log(Name alias) {
        this(alias, LOG);
    }

    /**
     * Create a <code>PUBLIC.LOG</code> table reference
     */
    public Log() {
        this(DSL.name("LOG"), null);
    }

    public <O extends Record> Log(Table<O> path, ForeignKey<O, LogRecord> childPath, InverseForeignKey<O, LogRecord> parentPath) {
        super(path, childPath, parentPath, LOG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LogPath extends Log implements Path<LogRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LogPath(Table<O> path, ForeignKey<O, LogRecord> childPath, InverseForeignKey<O, LogRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LogPath(Name alias, Table<LogRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LogPath as(String alias) {
            return new LogPath(DSL.name(alias), this);
        }

        @Override
        public LogPath as(Name alias) {
            return new LogPath(alias, this);
        }

        @Override
        public LogPath as(Table<?> alias) {
            return new LogPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LogRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    private transient ContPath _cont;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.CONT</code> table
     */
    public ContPath cont() {
        if (_cont == null)
            _cont = new ContPath(this, null, Keys.CONT_FK_LINE.getInverseKey());

        return _cont;
    }

    private transient CrumbPath _crumb;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.CRUMB</code> table
     */
    public CrumbPath crumb() {
        if (_crumb == null)
            _crumb = new CrumbPath(this, null, Keys.CRUMB_FK_LINE.getInverseKey());

        return _crumb;
    }

    private transient CrumbMisfitsPath _crumbMisfits;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.CRUMB_MISFITS</code> table
     */
    public CrumbMisfitsPath crumbMisfits() {
        if (_crumbMisfits == null)
            _crumbMisfits = new CrumbMisfitsPath(this, null, Keys.CRUMB_MISFITS_FK_LINE.getInverseKey());

        return _crumbMisfits;
    }

    private transient CtxPath _ctx;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.CTX</code> table
     */
    public CtxPath ctx() {
        if (_ctx == null)
            _ctx = new CtxPath(this, null, Keys.CTX_FK_LINE.getInverseKey());

        return _ctx;
    }

    private transient CtxMisfitsPath _ctxMisfits;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.CTX_MISFITS</code>
     * table
     */
    public CtxMisfitsPath ctxMisfits() {
        if (_ctxMisfits == null)
            _ctxMisfits = new CtxMisfitsPath(this, null, Keys.CTX_MISFITS_FK_LINE.getInverseKey());

        return _ctxMisfits;
    }

    private transient MesgPath _mesg;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.MESG</code> table
     */
    public MesgPath mesg() {
        if (_mesg == null)
            _mesg = new MesgPath(this, null, Keys.MESG_FK_LINE.getInverseKey());

        return _mesg;
    }

    private transient TrakPath _trak;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.TRAK</code> table
     */
    public TrakPath trak() {
        if (_trak == null)
            _trak = new TrakPath(this, null, Keys.TRAK_FK_LINE.getInverseKey());

        return _trak;
    }

    private transient TrakMisfitsPath _trakMisfits;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.TRAK_MISFITS</code> table
     */
    public TrakMisfitsPath trakMisfits() {
        if (_trakMisfits == null)
            _trakMisfits = new TrakMisfitsPath(this, null, Keys.TRAK_MISFITS_FK_LINE.getInverseKey());

        return _trakMisfits;
    }

    @Override
    public Log as(String alias) {
        return new Log(DSL.name(alias), this);
    }

    @Override
    public Log as(Name alias) {
        return new Log(alias, this);
    }

    @Override
    public Log as(Table<?> alias) {
        return new Log(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(String name) {
        return new Log(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(Name name) {
        return new Log(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(Table<?> name) {
        return new Log(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Log where(Condition condition) {
        return new Log(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Log where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Log where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Log where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Log where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Log where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Log where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Log where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Log whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Log whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
