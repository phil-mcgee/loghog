/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.public_.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.Log.LogPath;
import org.jooq.generated.public_.tables.Mesg.MesgPath;
import org.jooq.generated.public_.tables.records.ContRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cont extends TableImpl<ContRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.CONT</code>
     */
    public static final Cont CONT = new Cont();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContRecord> getRecordType() {
        return ContRecord.class;
    }

    /**
     * The column <code>PUBLIC.CONT.LINE</code>.
     */
    public final TableField<ContRecord, Integer> LINE = createField(DSL.name("LINE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONT.MESG</code>.
     */
    public final TableField<ContRecord, Integer> MESG = createField(DSL.name("MESG"), SQLDataType.INTEGER, this, "");

    private Cont(Name alias, Table<ContRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cont(Name alias, Table<ContRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.CONT</code> table reference
     */
    public Cont(String alias) {
        this(DSL.name(alias), CONT);
    }

    /**
     * Create an aliased <code>PUBLIC.CONT</code> table reference
     */
    public Cont(Name alias) {
        this(alias, CONT);
    }

    /**
     * Create a <code>PUBLIC.CONT</code> table reference
     */
    public Cont() {
        this(DSL.name("CONT"), null);
    }

    public <O extends Record> Cont(Table<O> path, ForeignKey<O, ContRecord> childPath, InverseForeignKey<O, ContRecord> parentPath) {
        super(path, childPath, parentPath, CONT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ContPath extends Cont implements Path<ContRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ContPath(Table<O> path, ForeignKey<O, ContRecord> childPath, InverseForeignKey<O, ContRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ContPath(Name alias, Table<ContRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ContPath as(String alias) {
            return new ContPath(DSL.name(alias), this);
        }

        @Override
        public ContPath as(Name alias) {
            return new ContPath(alias, this);
        }

        @Override
        public ContPath as(Table<?> alias) {
            return new ContPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ContRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1F;
    }

    @Override
    public List<ForeignKey<ContRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONT_FK_LINE, Keys.CONT_FK_MESG);
    }

    private transient LogPath _log;

    /**
     * Get the implicit join path to the <code>PUBLIC.LOG</code> table.
     */
    public LogPath log() {
        if (_log == null)
            _log = new LogPath(this, Keys.CONT_FK_LINE, null);

        return _log;
    }

    private transient MesgPath _mesg;

    /**
     * Get the implicit join path to the <code>PUBLIC.MESG</code> table.
     */
    public MesgPath mesg() {
        if (_mesg == null)
            _mesg = new MesgPath(this, Keys.CONT_FK_MESG, null);

        return _mesg;
    }

    @Override
    public Cont as(String alias) {
        return new Cont(DSL.name(alias), this);
    }

    @Override
    public Cont as(Name alias) {
        return new Cont(alias, this);
    }

    @Override
    public Cont as(Table<?> alias) {
        return new Cont(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cont rename(String name) {
        return new Cont(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cont rename(Name name) {
        return new Cont(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cont rename(Table<?> name) {
        return new Cont(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cont where(Condition condition) {
        return new Cont(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cont where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cont where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cont where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cont where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cont where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cont where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cont where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cont whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cont whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
