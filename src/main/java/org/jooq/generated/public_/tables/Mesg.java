/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.public_.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.Cont.ContPath;
import org.jooq.generated.public_.tables.Log.LogPath;
import org.jooq.generated.public_.tables.records.MesgRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Mesg extends TableImpl<MesgRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.MESG</code>
     */
    public static final Mesg MESG = new Mesg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MesgRecord> getRecordType() {
        return MesgRecord.class;
    }

    /**
     * The column <code>PUBLIC.MESG.LINE</code>.
     */
    public final TableField<MesgRecord, Integer> LINE = createField(DSL.name("LINE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MESG.TIMESTAMP</code>.
     */
    public final TableField<MesgRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("TIMESTAMP"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MESG.THREAD</code>.
     */
    public final TableField<MesgRecord, String> THREAD = createField(DSL.name("THREAD"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MESG.LOGGER</code>.
     */
    public final TableField<MesgRecord, String> LOGGER = createField(DSL.name("LOGGER"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MESG.LEVEL</code>.
     */
    public final TableField<MesgRecord, String> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MESG.MESSAGE</code>.
     */
    public final TableField<MesgRecord, String> MESSAGE = createField(DSL.name("MESSAGE"), SQLDataType.VARCHAR(1000000000), this, "");

    private Mesg(Name alias, Table<MesgRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Mesg(Name alias, Table<MesgRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.MESG</code> table reference
     */
    public Mesg(String alias) {
        this(DSL.name(alias), MESG);
    }

    /**
     * Create an aliased <code>PUBLIC.MESG</code> table reference
     */
    public Mesg(Name alias) {
        this(alias, MESG);
    }

    /**
     * Create a <code>PUBLIC.MESG</code> table reference
     */
    public Mesg() {
        this(DSL.name("MESG"), null);
    }

    public <O extends Record> Mesg(Table<O> path, ForeignKey<O, MesgRecord> childPath, InverseForeignKey<O, MesgRecord> parentPath) {
        super(path, childPath, parentPath, MESG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MesgPath extends Mesg implements Path<MesgRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MesgPath(Table<O> path, ForeignKey<O, MesgRecord> childPath, InverseForeignKey<O, MesgRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MesgPath(Name alias, Table<MesgRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MesgPath as(String alias) {
            return new MesgPath(DSL.name(alias), this);
        }

        @Override
        public MesgPath as(Name alias) {
            return new MesgPath(alias, this);
        }

        @Override
        public MesgPath as(Table<?> alias) {
            return new MesgPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MesgRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<ForeignKey<MesgRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MESG_FK_LINE);
    }

    private transient LogPath _log;

    /**
     * Get the implicit join path to the <code>PUBLIC.LOG</code> table.
     */
    public LogPath log() {
        if (_log == null)
            _log = new LogPath(this, Keys.MESG_FK_LINE, null);

        return _log;
    }

    private transient ContPath _cont;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.CONT</code> table
     */
    public ContPath cont() {
        if (_cont == null)
            _cont = new ContPath(this, null, Keys.CONT_FK_MESG.getInverseKey());

        return _cont;
    }

    @Override
    public Mesg as(String alias) {
        return new Mesg(DSL.name(alias), this);
    }

    @Override
    public Mesg as(Name alias) {
        return new Mesg(alias, this);
    }

    @Override
    public Mesg as(Table<?> alias) {
        return new Mesg(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mesg rename(String name) {
        return new Mesg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mesg rename(Name name) {
        return new Mesg(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mesg rename(Table<?> name) {
        return new Mesg(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mesg where(Condition condition) {
        return new Mesg(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mesg where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mesg where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mesg where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mesg where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mesg where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mesg where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mesg where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mesg whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mesg whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
