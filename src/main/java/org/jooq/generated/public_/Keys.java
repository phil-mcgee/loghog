/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.public_;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.tables.Cont;
import org.jooq.generated.public_.tables.Crumb;
import org.jooq.generated.public_.tables.CrumbMisfits;
import org.jooq.generated.public_.tables.Ctx;
import org.jooq.generated.public_.tables.CtxMisfits;
import org.jooq.generated.public_.tables.Log;
import org.jooq.generated.public_.tables.Mesg;
import org.jooq.generated.public_.tables.Trak;
import org.jooq.generated.public_.tables.TrakMisfits;
import org.jooq.generated.public_.tables.records.ContRecord;
import org.jooq.generated.public_.tables.records.CrumbMisfitsRecord;
import org.jooq.generated.public_.tables.records.CrumbRecord;
import org.jooq.generated.public_.tables.records.CtxMisfitsRecord;
import org.jooq.generated.public_.tables.records.CtxRecord;
import org.jooq.generated.public_.tables.records.LogRecord;
import org.jooq.generated.public_.tables.records.MesgRecord;
import org.jooq.generated.public_.tables.records.TrakMisfitsRecord;
import org.jooq.generated.public_.tables.records.TrakRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * PUBLIC.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ContRecord> CONSTRAINT_1F = Internal.createUniqueKey(Cont.CONT, DSL.name("CONSTRAINT_1F"), new TableField[] { Cont.CONT.LINE }, true);
    public static final UniqueKey<CrumbRecord> CONSTRAINT_3 = Internal.createUniqueKey(Crumb.CRUMB, DSL.name("CONSTRAINT_3"), new TableField[] { Crumb.CRUMB.LINE }, true);
    public static final UniqueKey<CrumbMisfitsRecord> CONSTRAINT_F = Internal.createUniqueKey(CrumbMisfits.CRUMB_MISFITS, DSL.name("CONSTRAINT_F"), new TableField[] { CrumbMisfits.CRUMB_MISFITS.LINE }, true);
    public static final UniqueKey<CtxRecord> CONSTRAINT_10 = Internal.createUniqueKey(Ctx.CTX, DSL.name("CONSTRAINT_10"), new TableField[] { Ctx.CTX.LINE }, true);
    public static final UniqueKey<CtxMisfitsRecord> CONSTRAINT_E = Internal.createUniqueKey(CtxMisfits.CTX_MISFITS, DSL.name("CONSTRAINT_E"), new TableField[] { CtxMisfits.CTX_MISFITS.LINE }, true);
    public static final UniqueKey<LogRecord> CONSTRAINT_1 = Internal.createUniqueKey(Log.LOG, DSL.name("CONSTRAINT_1"), new TableField[] { Log.LOG.LINE }, true);
    public static final UniqueKey<MesgRecord> CONSTRAINT_2 = Internal.createUniqueKey(Mesg.MESG, DSL.name("CONSTRAINT_2"), new TableField[] { Mesg.MESG.LINE }, true);
    public static final UniqueKey<TrakRecord> CONSTRAINT_27 = Internal.createUniqueKey(Trak.TRAK, DSL.name("CONSTRAINT_27"), new TableField[] { Trak.TRAK.LINE }, true);
    public static final UniqueKey<TrakMisfitsRecord> CONSTRAINT_A = Internal.createUniqueKey(TrakMisfits.TRAK_MISFITS, DSL.name("CONSTRAINT_A"), new TableField[] { TrakMisfits.TRAK_MISFITS.LINE }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ContRecord, LogRecord> CONT_FK_LINE = Internal.createForeignKey(Cont.CONT, DSL.name("CONT_FK_LINE"), new TableField[] { Cont.CONT.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
    public static final ForeignKey<ContRecord, MesgRecord> CONT_FK_MESG = Internal.createForeignKey(Cont.CONT, DSL.name("CONT_FK_MESG"), new TableField[] { Cont.CONT.MESG }, Keys.CONSTRAINT_2, new TableField[] { Mesg.MESG.LINE }, true);
    public static final ForeignKey<CrumbRecord, LogRecord> CRUMB_FK_LINE = Internal.createForeignKey(Crumb.CRUMB, DSL.name("CRUMB_FK_LINE"), new TableField[] { Crumb.CRUMB.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
    public static final ForeignKey<CrumbMisfitsRecord, LogRecord> CRUMB_MISFITS_FK_LINE = Internal.createForeignKey(CrumbMisfits.CRUMB_MISFITS, DSL.name("CRUMB_MISFITS_FK_LINE"), new TableField[] { CrumbMisfits.CRUMB_MISFITS.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
    public static final ForeignKey<CtxRecord, LogRecord> CTX_FK_LINE = Internal.createForeignKey(Ctx.CTX, DSL.name("CTX_FK_LINE"), new TableField[] { Ctx.CTX.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
    public static final ForeignKey<CtxMisfitsRecord, LogRecord> CTX_MISFITS_FK_LINE = Internal.createForeignKey(CtxMisfits.CTX_MISFITS, DSL.name("CTX_MISFITS_FK_LINE"), new TableField[] { CtxMisfits.CTX_MISFITS.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
    public static final ForeignKey<MesgRecord, LogRecord> MESG_FK_LINE = Internal.createForeignKey(Mesg.MESG, DSL.name("MESG_FK_LINE"), new TableField[] { Mesg.MESG.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
    public static final ForeignKey<TrakRecord, LogRecord> TRAK_FK_LINE = Internal.createForeignKey(Trak.TRAK, DSL.name("TRAK_FK_LINE"), new TableField[] { Trak.TRAK.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
    public static final ForeignKey<TrakMisfitsRecord, LogRecord> TRAK_MISFITS_FK_LINE = Internal.createForeignKey(TrakMisfits.TRAK_MISFITS, DSL.name("TRAK_MISFITS_FK_LINE"), new TableField[] { TrakMisfits.TRAK_MISFITS.LINE }, Keys.CONSTRAINT_1, new TableField[] { Log.LOG.LINE }, true);
}
